name: Pull Request

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Quick Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

    - name: Run all tests
      run: cargo test --verbose --all

    - name: Test manager package
      run: cargo test --package manager --verbose

    - name: Test agent package
      run: cargo test --package agent --verbose

  build:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

    - name: Build manager (debug)
      run: cargo build --package manager

    - name: Build agent (debug)
      run: cargo build --package agent

    - name: Build manager (release)
      run: cargo build --package manager --release

    - name: Build agent (release)
      run: cargo build --package agent --release

    - name: Verify binary sizes
      run: |
        echo "Manager binary size:"
        ls -lh target/release/manager
        echo "Agent binary size:"
        ls -lh target/release/agent

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [check, test, build]
    steps:
    - name: Summary
      run: |
        echo "âœ… All checks passed!"
        echo "- Code formatting: OK"
        echo "- Clippy lints: OK"
        echo "- Tests (Ubuntu): OK"
        echo "- Tests (macOS): OK"
        echo "- Build: OK"
