name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-binaries:
    name: Build ${{ matrix.binary }} for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: manager
            artifact_name: manager-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: agent
            artifact_name: agent-linux-amd64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests before build
      run: cargo test --package ${{ matrix.binary }} --release

    - name: Build binary
      run: cargo build --package ${{ matrix.binary }} --release --target ${{ matrix.target }}

    - name: Strip binary
      run: strip target/${{ matrix.target }}/release/${{ matrix.binary }}

    - name: Prepare binary
      run: |
        cd target/${{ matrix.target }}/release
        chmod +x ${{ matrix.binary }}
        tar czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary }}
        mv ${{ matrix.artifact_name }}.tar.gz ../../..

    - name: Generate checksum
      run: sha256sum ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.tar.gz
          ${{ matrix.artifact_name }}.tar.gz.sha256

  create-release:
    name: Create Release
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f -exec cp {} release-assets/ \;
        ls -lh release-assets/

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in ${{ steps.get_version.outputs.version }}
          
          ### Binaries
          - `manager-linux-amd64.tar.gz`: Manager binary for Linux (x86_64)
          - `agent-linux-amd64.tar.gz`: Agent binary for Linux (x86_64)
          
          ### Installation
          ```bash
          # Download and install (example for Linux)
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/manager-linux-amd64.tar.gz
          tar xzf manager-linux-amd64.tar.gz
          chmod +x manager
          sudo mv manager /usr/local/bin/
          ```
          
          ### Verification
          ```bash
          # Verify checksum
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.version }}/manager-linux-amd64.tar.gz.sha256
          sha256sum -c manager-linux-amd64.tar.gz.sha256
          ```
        files: release-assets/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
